
import streamlit as st 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# data definition 
st.title('üå®Ô∏èPr√©vision m√©t√©orologiqueüå®Ô∏è')
st.write("La m√©t√©orologie est une science qui a pour objet l'√©tude des ph√©nom√®nes atmosph√©riques tels que les nuages, les pr√©cipitations ou le vent dans le but de comprendre comment ils se forment et √©voluent en fonction des param√®tres mesur√©s tels que la pression, la temp√©rature et l'humidit√©.")
st.write("C'est une discipline qui traite principalement de la m√©canique des fluides et de la thermodynamique mais qui fait usage de diff√©rentes autres branches de la physique, de la chimie et des math√©matiques. Purement descriptive √† l'origine, la m√©t√©orologie est devenue un lieu d'application de ces disciplines.")
st.write("La m√©t√©orologie moderne permet d'√©tablir des pr√©visions de l'√©volution du temps en s'appuyant sur des mod√®les math√©matiques √† court comme √† long terme qui assimilent des donn√©es de nombreuses sources dont les stations, les satellites et les radars m√©t√©orologiques. La m√©t√©orologie a des applications dans des domaines tr√®s divers comme les besoins militaires, la production d'√©nergie, les transports (a√©riens, maritimes et terrestres), l'agriculture,  la construction, la photographie a√©rienne ou le cin√©ma. Elle est √©galement appliqu√©e pour la pr√©vision de la qualit√© de l'air ou de plusieurs risques naturels d'origine atmosph√©rique.")

url="nmamadousow@gmail.com"
with st.sidebar:
    st.info('Data analysis and visualisation')
    st.markdown(''' 
    üìß [Openwather](<https://openweathermap.org/>)
    
    üìß [M√©t√©o S√©n√©gal](<https://www.meteoart.com/africa/senegal?page=day#date=2023-07-18>)
    
    üíª [Code source](<nmamadousow@gmail.com>)
                ''')
    st.write('Made with üíó by  ‚òéÔ∏è Contact',url)
    st.info('GOMYCODE SN')
    
## data exploratory analysis
st.title('üíπExploratory data analysis üíπ')

df= pd.read_csv('weather.csv')
st.info('Data Frame')
st.write(df)

st.info('Heatmap isnull')
fig, ax = plt.subplots()
sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')
st.pyplot(fig)

# Nous allons traiter les donn√©es manquents

df['Sunshine'].fillna(0, inplace=True)
df['WindGustDir'].fillna(0, inplace=True)
df['WindGustSpeed'].fillna(0, inplace=True)
df['WindSpeed9am'].fillna(0, inplace=True)
df['WindDir3pm'].fillna(0, inplace=True)
df['WindDir9am'].fillna(0, inplace=True)

st.info('Clean isnull')
fig, ax = plt.subplots()
sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')
st.pyplot(fig)

st.info('Correlations graph')
fig, ax = plt.subplots()
sns.heatmap(df.corr(),annot=False,cbar=True)
st.pyplot(fig)

df.drop('RISK_MM', inplace=True,axis=1)
df.drop('WindGustDir', inplace=True,axis=1)
df.drop('WindDir9am', inplace=True,axis=1)
df.drop('WindDir3pm', inplace=True,axis=1)

# Nous utiliserons LabelEncoder pour g√©rer les √©tiquettes de nos principales pr√©visions
from sklearn.preprocessing import LabelEncoder
LE = LabelEncoder()
df['RainToday'] = LE.fit_transform(df['RainToday'])
df['RainTomorrow'] = LE.fit_transform(df['RainTomorrow'])

st.info('Date frame encoder')
st.write(df)

