import streamlit as st
from streamlit_option_menu import option_menu
import pandas as pd
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier

#=========================================================================================================

st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="MathsPratique",
    page_icon="image/MathsPratique.ico"
    )

#=========================================================================================================

selected = option_menu(
        menu_title = None,  # required
        options = ["Home","Data","Prediction"],   # required
        orientation ="horizontal",
        icons = ["house","book","envelope"],
        menu_icon = "cast",
        default_index = 0,
        styles = {"container":{"padding":"0!important","background-color":"gray"},
                     "icon":{"color":"white","font-size":"15px"},
                     "nav-link":{"font-size":"15px","text-align":"center","margin":"0px","--hover-color":"#eee"},
                     "nav-link-selected":{"background-color":"blue"}}
        )
    
#=========================================================================================================

 # Afficher l'image
st.sidebar.image("image/climat.webp", caption="Climat et m√©t√©o")

df= pd.read_csv('dataset/weather.csv')
  # Nous allons traiter les donn√©es manquents
df['Sunshine'].fillna(0, inplace=True)
df['WindSpeed'].fillna(0, inplace=True)

encodage = LabelEncoder()
df['Rain'] = encodage.fit_transform(df['Rain'])

# separation des donn√©es 
from sklearn.model_selection import train_test_split
X = df.drop('Rain',axis=1).values
y = df['Rain'].values

# standardiser nos informations, car elles sont √† des √©chelles tr√®s diff√©rentes
from sklearn.preprocessing import MinMaxScaler
minmax = MinMaxScaler()
X = minmax.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=80)

#=========================================================================================================

if selected =="Home":
    
    if st.sidebar.toggle("A propos MathsPratique", True):
        with st.expander(":blue[Bienvenue dans MathsPratique]", True) : 
            colonne_1 , colonne_2 = st.columns([1,2])
        with colonne_1 :
            st.image("image/Logomp.jpg")
        with colonne_2 : 
            st.markdown("""
                        Nous sommes Team MP, notre expertise r√©side dans les domaines de la science des donn√©es et de l'intelligence artificielle.
                        Avec une approche technique et concise, nous nous engageons √† fournir des solutions efficaces et pr√©cises dans nos projets.
                        """)
            
            st.markdown("""
            ## Contacts
            * üìß  [MathsPratique](<mathspratique.mp@gmail.com>)
            * üìß  +221 77 756 10 43  """)
            
    st.subheader("**:blue[Application de pr√©vision m√©trologique]**",divider='rainbow')    
       
    st.markdown("""
        ### M√©t√©orologie üå®Ô∏è‚õÖ 
                
        La m√©t√©orologie est une science qui a pour objet l'√©tude des ph√©nom√®nes atmosph√©riques tels que
        les nuages, les pr√©cipitations ou le vent dans le but de comprendre comment ils se forment et √©voluent en fonction
        des param√®tres mesur√©s notamment
        **la pression**,
        **la temp√©rature**,
        **l'humidit√©**.
      
        C'est une discipline qui traite principalement de la m√©canique des fluides et de la thermodynamique 
        mais qui fait usage de diff√©rentes autres branches de la physique, de la chimie et des math√©matiques.
        Purement descriptive √† l'origine, la m√©t√©orologie est devenue un lieu d'application de ces disciplines.
        
        ### M√©t√©orologie moderne üå®Ô∏è‚õÖ
        La m√©t√©orologie moderne permet d'√©tablir des pr√©visions de l'√©volution du temps
        en s'appuyant sur des mod√®les math√©matiques √† court comme √† long terme qui assimilent des donn√©es 
        de nombreuses sources dont les stations, les satellites et les radars m√©t√©orologiques.
        La m√©t√©orologie a des applications dans des domaines tr√®s divers comme les besoins militaires,
        la production d'√©nergie, les transports (a√©riens, maritimes et terrestres), l'agriculture,  la construction, la photographie a√©rienne ou le cin√©ma.
        Elle est √©galement appliqu√©e pour la pr√©vision de la qualit√© de l'air ou de plusieurs risques naturels d'origine atmosph√©rique.
            """)
    
 #=========================================================================================================
 
if selected =="Data":
    
    st.subheader("**:blue[Application de pr√©vision m√©trologique]**",divider='rainbow') 
    
    st.write("Le dataset de formation du mod√®le : ")
    st.write(df)
    
    st.header("Collecter des donn√©es au format CSV")
    
    # Cr√©ation du formulaire avec le widget Form de streamlit 
    with st.form("user_input_form"):
        st.write("Entrez vos r√©ponses:")
        name = st.text_input("Name")
        evaporation = st.number_input("Evaporation")
        sunshine = st.number_input("Sunshine")
        windSpeed = st.number_input("WindSpeed")
        humidity = st.number_input("Humidity")
        pressure = st.number_input("Pressure")
        cloud = st.number_input("Cloud")
        temp = st.number_input("Temp")
        submit_button = st.form_submit_button("Submit")
        
    # Ici nous cr√©e le fichier csv pour stocke les donn√©es 
    csv_file_path = "user_answers.csv"
    data = pd.DataFrame(columns=["Name","Evaporation","Sunshine","WindSpeed","Humidity","Pressure","Cloud","Temp"])
    
    # Verification du fichier csv_file_path s'il existe puis lecture avec le panda
    if os.path.exists(csv_file_path):
        data = pd.read_csv(csv_file_path)
    
    # Creation du boutton d'evoie une fois un clic sur le boutton le message suiavant 
    # s'affiche Answers submitted successfully! qui montre l'envoi dans le fichier csv a reussi 
    
    if submit_button:
        new_row = {"Name":name,"Evaporation":evaporation,"Sunshine": sunshine,"WindSpeed":windSpeed,"Humidity":humidity,"Pressure":pressure,"Cloud":cloud,"Temp":temp}
        data = pd.concat([data, pd.DataFrame([new_row])], ignore_index=True)
        data.to_csv(csv_file_path, index=False)
        st.success("Answers submitted successfully!")
    
    st.write("Donn√©es actuelles :")
    st.write(data)
    
    # Cr√©ation du boutton telechargement une fois les donn√©es bien rmpouie le fichier peut √©tre telecharger 
    # qui contient les donn√©s enregistre 
    st.download_button(
        label="Download CSV File",
        data=data.to_csv(index=False).encode("utf-8"),
        file_name="user_answers.csv",
        mime="text/csv",)
    

    with st.sidebar:
        option_data_viz = st.selectbox("Option", ["Choisissez", "Graphe1", "Graphe2"])
        
        if option_data_viz == "Graphe1":
            st.write('Graphique de corr√©lation sur les donn√©es')
            fig, ax = plt.subplots()
            sns.heatmap(df.corr(),annot=True,cbar=True)
            st.pyplot(fig)
            
        elif option_data_viz == "Graphe2":
            st.write("Graphique de corr√©lation sur les donn√©es")
            fig, ax =plt.subplots(1,2,figsize= (15,6))
            sns.scatterplot(df['Temp'],ax=ax[0])
            sns.countplot(df['Evaporation'],ax=ax[1])
            st.pyplot(fig)
    
#=========================================================================================================

if selected =="Prediction":
    
    with st.sidebar:
        st.markdown("""
                   
                    üìß [Openwather](<https://openweathermap.org/>)
      
                    üìß [M√©t√©oS√©n√©gal](<https://www.meteoart.com/africa/senegal?page=day#date=2023-07-18>)
            """)
        
    st.subheader("**:blue[Application de pr√©vision m√©trologique]**",divider='rainbow')
    
# Passons aux algorithmes pr√©dicteurs svm
    model_svm = SVC()
    model_svm.fit(X_train, y_train)
    prediction_svc = model_svm.predict(X_test)
    Accuracy = (np.round(accuracy_score(y_test,prediction_svc),2)*100,'%')
 
# Passons aux algorithmes pr√©dicteurs xgboost
    # model_xgboost = XGBClassifier(n_estimators=2, max_depth=2, learning_rate=1, objective='binary:logistic')
    # model_xgboost.fit(X_train,y_train)
    # prediction_xgboost = model_xgboost.predict(X_test)
    # st.sidebar.write('Accuracy:', np.round(accuracy_score(y_test,prediction_xgboost),3)*100,'%')

    # Fonction input user
    def user_input(Evaporation,Sunshine,WindSpeed,Humidity,Pressure,Cloud,Temp):
        data = np.array([Evaporation,Sunshine,WindSpeed,Humidity,Pressure,Cloud,Temp])
        prediction_data = model_svm.predict(data.reshape(1,-1))
        return prediction_data

    # L'utilisateur saisie une valeur pour chaque caracteristique
    st.write('Entrez les donn√©es :')
  
    Evaporation = st.number_input("Evaporation")
    Sunshine = st.number_input("Sunshine")
    WindSpeed = st.number_input("WindSpeed")
    Humidity = st.number_input("Humidity")
    Pressure = st.number_input("Pressure")
    Cloud = st.number_input("Cloud")
    Temp = st.number_input("Temp")

    # creation du bouton de prediction 
    if st.button('‚ñ∂Ô∏è'):
        prediction = user_input(Evaporation,Sunshine,WindSpeed,Humidity,Pressure,Cloud,Temp)
        if prediction == 0:
            st.title("ü§ñ")  
            st.write("Non ‚õÖ‚õÖ‚õÖ")
        else:
            st.title("ü§ñ")  
            st.write("Oui üå®Ô∏èüå®Ô∏èüå®Ô∏è")
        
    #=======================================================================================================
